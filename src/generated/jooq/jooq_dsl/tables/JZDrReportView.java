/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import jooq.jooq_dsl.Indexes;
import jooq.jooq_dsl.JDmcReport;
import jooq.jooq_dsl.Keys;
import jooq.jooq_dsl.tables.records.JZDrReportViewRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 리포트 열람 이력 테이블
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JZDrReportView extends TableImpl<JZDrReportViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>dmc_report.Z_DR_REPORT_VIEW</code>
     */
    public static final JZDrReportView Z_DR_REPORT_VIEW = new JZDrReportView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JZDrReportViewRecord> getRecordType() {
        return JZDrReportViewRecord.class;
    }

    /**
     * The column <code>dmc_report.Z_DR_REPORT_VIEW.ID</code>.
     */
    public final TableField<JZDrReportViewRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>dmc_report.Z_DR_REPORT_VIEW.USER_ID</code>. 사용자ID
     */
    public final TableField<JZDrReportViewRecord, String> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.VARCHAR(100), this, "사용자ID");

    /**
     * The column <code>dmc_report.Z_DR_REPORT_VIEW.USER_AUTH_CODE</code>. 계정 권한
     * 코드
     */
    public final TableField<JZDrReportViewRecord, String> USER_AUTH_CODE = createField(DSL.name("USER_AUTH_CODE"), SQLDataType.VARCHAR(32), this, "계정 권한 코드");

    /**
     * The column <code>dmc_report.Z_DR_REPORT_VIEW.R_CODE</code>.
     */
    public final TableField<JZDrReportViewRecord, String> R_CODE = createField(DSL.name("R_CODE"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>dmc_report.Z_DR_REPORT_VIEW.R_TYPE</code>. 보고서 종류
     */
    public final TableField<JZDrReportViewRecord, String> R_TYPE = createField(DSL.name("R_TYPE"), SQLDataType.VARCHAR(10), this, "보고서 종류");

    /**
     * The column <code>dmc_report.Z_DR_REPORT_VIEW.CONNECTION_IP</code>. 접속IP
     */
    public final TableField<JZDrReportViewRecord, String> CONNECTION_IP = createField(DSL.name("CONNECTION_IP"), SQLDataType.VARCHAR(32), this, "접속IP");

    /**
     * The column <code>dmc_report.Z_DR_REPORT_VIEW.NETWORK_PATH</code>. 접속경로
     */
    public final TableField<JZDrReportViewRecord, String> NETWORK_PATH = createField(DSL.name("NETWORK_PATH"), SQLDataType.VARCHAR(32), this, "접속경로");

    /**
     * The column <code>dmc_report.Z_DR_REPORT_VIEW.KEYWORD_TYPE</code>. 키워드 종류
     */
    public final TableField<JZDrReportViewRecord, String> KEYWORD_TYPE = createField(DSL.name("KEYWORD_TYPE"), SQLDataType.VARCHAR(32), this, "키워드 종류");

    /**
     * The column <code>dmc_report.Z_DR_REPORT_VIEW.KEYWORD</code>. 키워드
     */
    public final TableField<JZDrReportViewRecord, String> KEYWORD = createField(DSL.name("KEYWORD"), SQLDataType.VARCHAR(45), this, "키워드");

    /**
     * The column <code>dmc_report.Z_DR_REPORT_VIEW.CATEGORY</code>. 카테고리 내역
     */
    public final TableField<JZDrReportViewRecord, String> CATEGORY = createField(DSL.name("CATEGORY"), SQLDataType.VARCHAR(200), this, "카테고리 내역");

    /**
     * The column <code>dmc_report.Z_DR_REPORT_VIEW.DEVICE_TYPE</code>. 디바이스 종류
     */
    public final TableField<JZDrReportViewRecord, String> DEVICE_TYPE = createField(DSL.name("DEVICE_TYPE"), SQLDataType.VARCHAR(32), this, "디바이스 종류");

    /**
     * The column <code>dmc_report.Z_DR_REPORT_VIEW.DEVICE</code>. 이용기기
     */
    public final TableField<JZDrReportViewRecord, String> DEVICE = createField(DSL.name("DEVICE"), SQLDataType.VARCHAR(100), this, "이용기기");

    /**
     * The column <code>dmc_report.Z_DR_REPORT_VIEW.BROWSER</code>. 접속 브라우저
     */
    public final TableField<JZDrReportViewRecord, String> BROWSER = createField(DSL.name("BROWSER"), SQLDataType.VARCHAR(100), this, "접속 브라우저");

    /**
     * The column <code>dmc_report.Z_DR_REPORT_VIEW.REG_DATE</code>.
     */
    public final TableField<JZDrReportViewRecord, LocalDateTime> REG_DATE = createField(DSL.name("REG_DATE"), SQLDataType.LOCALDATETIME(0), this, "");

    private JZDrReportView(Name alias, Table<JZDrReportViewRecord> aliased) {
        this(alias, aliased, null);
    }

    private JZDrReportView(Name alias, Table<JZDrReportViewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("리포트 열람 이력 테이블"), TableOptions.table());
    }

    /**
     * Create an aliased <code>dmc_report.Z_DR_REPORT_VIEW</code> table
     * reference
     */
    public JZDrReportView(String alias) {
        this(DSL.name(alias), Z_DR_REPORT_VIEW);
    }

    /**
     * Create an aliased <code>dmc_report.Z_DR_REPORT_VIEW</code> table
     * reference
     */
    public JZDrReportView(Name alias) {
        this(alias, Z_DR_REPORT_VIEW);
    }

    /**
     * Create a <code>dmc_report.Z_DR_REPORT_VIEW</code> table reference
     */
    public JZDrReportView() {
        this(DSL.name("Z_DR_REPORT_VIEW"), null);
    }

    public <O extends Record> JZDrReportView(Table<O> child, ForeignKey<O, JZDrReportViewRecord> key) {
        super(child, key, Z_DR_REPORT_VIEW);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JDmcReport.DMC_REPORT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.Z_DR_REPORT_VIEW_R_CODE, Indexes.Z_DR_REPORT_VIEW_USER_ID);
    }

    @Override
    public Identity<JZDrReportViewRecord, Integer> getIdentity() {
        return (Identity<JZDrReportViewRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<JZDrReportViewRecord> getPrimaryKey() {
        return Keys.KEY_Z_DR_REPORT_VIEW_PRIMARY;
    }

    @Override
    public JZDrReportView as(String alias) {
        return new JZDrReportView(DSL.name(alias), this);
    }

    @Override
    public JZDrReportView as(Name alias) {
        return new JZDrReportView(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JZDrReportView rename(String name) {
        return new JZDrReportView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JZDrReportView rename(Name name) {
        return new JZDrReportView(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Integer, String, String, String, String, String, String, String, String, String, String, String, String, LocalDateTime> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
