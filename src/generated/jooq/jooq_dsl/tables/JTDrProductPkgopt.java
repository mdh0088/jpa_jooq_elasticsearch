/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import jooq.jooq_dsl.Indexes;
import jooq.jooq_dsl.JDmcReport;
import jooq.jooq_dsl.Keys;
import jooq.jooq_dsl.tables.records.JTDrProductPkgoptRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JTDrProductPkgopt extends TableImpl<JTDrProductPkgoptRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>dmc_report.T_DR_PRODUCT_PKGOPT</code>
     */
    public static final JTDrProductPkgopt T_DR_PRODUCT_PKGOPT = new JTDrProductPkgopt();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JTDrProductPkgoptRecord> getRecordType() {
        return JTDrProductPkgoptRecord.class;
    }

    /**
     * The column <code>dmc_report.T_DR_PRODUCT_PKGOPT.IDX</code>.
     */
    public final TableField<JTDrProductPkgoptRecord, Integer> IDX = createField(DSL.name("IDX"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>dmc_report.T_DR_PRODUCT_PKGOPT.P_CODE</code>.
     */
    public final TableField<JTDrProductPkgoptRecord, String> P_CODE = createField(DSL.name("P_CODE"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>dmc_report.T_DR_PRODUCT_PKGOPT.OPT_CODE</code>.
     */
    public final TableField<JTDrProductPkgoptRecord, String> OPT_CODE = createField(DSL.name("OPT_CODE"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>dmc_report.T_DR_PRODUCT_PKGOPT.PKG_CODE</code>. 패키지 코드
     */
    public final TableField<JTDrProductPkgoptRecord, String> PKG_CODE = createField(DSL.name("PKG_CODE"), SQLDataType.VARCHAR(20), this, "패키지 코드");

    /**
     * The column <code>dmc_report.T_DR_PRODUCT_PKGOPT.DEPTH_TYPE</code>. 뎁스 타입
     */
    public final TableField<JTDrProductPkgoptRecord, String> DEPTH_TYPE = createField(DSL.name("DEPTH_TYPE"), SQLDataType.VARCHAR(20), this, "뎁스 타입");

    /**
     * The column <code>dmc_report.T_DR_PRODUCT_PKGOPT.NAME</code>. 패키지 명
     */
    public final TableField<JTDrProductPkgoptRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(200), this, "패키지 명");

    /**
     * The column <code>dmc_report.T_DR_PRODUCT_PKGOPT.PKG_FILE_TYPE</code>.
     */
    public final TableField<JTDrProductPkgoptRecord, String> PKG_FILE_TYPE = createField(DSL.name("PKG_FILE_TYPE"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>dmc_report.T_DR_PRODUCT_PKGOPT.EXPOSURE</code>. 순서
     */
    public final TableField<JTDrProductPkgoptRecord, Integer> EXPOSURE = createField(DSL.name("EXPOSURE"), SQLDataType.INTEGER, this, "순서");

    /**
     * The column <code>dmc_report.T_DR_PRODUCT_PKGOPT.SECURITY_PRICE</code>.
     */
    public final TableField<JTDrProductPkgoptRecord, Integer> SECURITY_PRICE = createField(DSL.name("SECURITY_PRICE"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>dmc_report.T_DR_PRODUCT_PKGOPT.NORMAL_PRICE</code>.
     */
    public final TableField<JTDrProductPkgoptRecord, Integer> NORMAL_PRICE = createField(DSL.name("NORMAL_PRICE"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>dmc_report.T_DR_PRODUCT_PKGOPT.PRICE</code>. 소비자가
     */
    public final TableField<JTDrProductPkgoptRecord, Integer> PRICE = createField(DSL.name("PRICE"), SQLDataType.INTEGER, this, "소비자가");

    /**
     * The column <code>dmc_report.T_DR_PRODUCT_PKGOPT.REGIST_DATE</code>. 등록일
     */
    public final TableField<JTDrProductPkgoptRecord, LocalDateTime> REGIST_DATE = createField(DSL.name("REGIST_DATE"), SQLDataType.LOCALDATETIME(0), this, "등록일");

    /**
     * The column <code>dmc_report.T_DR_PRODUCT_PKGOPT.REGIST_ID</code>. 등록자
     */
    public final TableField<JTDrProductPkgoptRecord, String> REGIST_ID = createField(DSL.name("REGIST_ID"), SQLDataType.VARCHAR(45), this, "등록자");

    /**
     * The column <code>dmc_report.T_DR_PRODUCT_PKGOPT.UPDATE_DATE</code>. 수정일
     */
    public final TableField<JTDrProductPkgoptRecord, LocalDateTime> UPDATE_DATE = createField(DSL.name("UPDATE_DATE"), SQLDataType.LOCALDATETIME(0), this, "수정일");

    /**
     * The column <code>dmc_report.T_DR_PRODUCT_PKGOPT.UPDATE_ID</code>. 수정자
     */
    public final TableField<JTDrProductPkgoptRecord, String> UPDATE_ID = createField(DSL.name("UPDATE_ID"), SQLDataType.VARCHAR(45), this, "수정자");

    private JTDrProductPkgopt(Name alias, Table<JTDrProductPkgoptRecord> aliased) {
        this(alias, aliased, null);
    }

    private JTDrProductPkgopt(Name alias, Table<JTDrProductPkgoptRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>dmc_report.T_DR_PRODUCT_PKGOPT</code> table
     * reference
     */
    public JTDrProductPkgopt(String alias) {
        this(DSL.name(alias), T_DR_PRODUCT_PKGOPT);
    }

    /**
     * Create an aliased <code>dmc_report.T_DR_PRODUCT_PKGOPT</code> table
     * reference
     */
    public JTDrProductPkgopt(Name alias) {
        this(alias, T_DR_PRODUCT_PKGOPT);
    }

    /**
     * Create a <code>dmc_report.T_DR_PRODUCT_PKGOPT</code> table reference
     */
    public JTDrProductPkgopt() {
        this(DSL.name("T_DR_PRODUCT_PKGOPT"), null);
    }

    public <O extends Record> JTDrProductPkgopt(Table<O> child, ForeignKey<O, JTDrProductPkgoptRecord> key) {
        super(child, key, T_DR_PRODUCT_PKGOPT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JDmcReport.DMC_REPORT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.T_DR_PRODUCT_PKGOPT_OPT_CODE, Indexes.T_DR_PRODUCT_PKGOPT_P_CODE);
    }

    @Override
    public Identity<JTDrProductPkgoptRecord, Integer> getIdentity() {
        return (Identity<JTDrProductPkgoptRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<JTDrProductPkgoptRecord> getPrimaryKey() {
        return Keys.KEY_T_DR_PRODUCT_PKGOPT_PRIMARY;
    }

    @Override
    public JTDrProductPkgopt as(String alias) {
        return new JTDrProductPkgopt(DSL.name(alias), this);
    }

    @Override
    public JTDrProductPkgopt as(Name alias) {
        return new JTDrProductPkgopt(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JTDrProductPkgopt rename(String name) {
        return new JTDrProductPkgopt(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JTDrProductPkgopt rename(Name name) {
        return new JTDrProductPkgopt(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Integer, String, String, String, String, String, String, Integer, Integer, Integer, Integer, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
