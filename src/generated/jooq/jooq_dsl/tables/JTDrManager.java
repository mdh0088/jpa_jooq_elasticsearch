/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import jooq.jooq_dsl.Indexes;
import jooq.jooq_dsl.JDmcReport;
import jooq.jooq_dsl.Keys;
import jooq.jooq_dsl.tables.records.JTDrManagerRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 관리자 테이블
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JTDrManager extends TableImpl<JTDrManagerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>dmc_report.T_DR_MANAGER</code>
     */
    public static final JTDrManager T_DR_MANAGER = new JTDrManager();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JTDrManagerRecord> getRecordType() {
        return JTDrManagerRecord.class;
    }

    /**
     * The column <code>dmc_report.T_DR_MANAGER.MANAGER_ID</code>.
     */
    public final TableField<JTDrManagerRecord, String> MANAGER_ID = createField(DSL.name("MANAGER_ID"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>dmc_report.T_DR_MANAGER.PASSWD</code>.
     */
    public final TableField<JTDrManagerRecord, String> PASSWD = createField(DSL.name("PASSWD"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>dmc_report.T_DR_MANAGER.NAME</code>.
     */
    public final TableField<JTDrManagerRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>dmc_report.T_DR_MANAGER.ROLE</code>.
     */
    public final TableField<JTDrManagerRecord, String> ROLE = createField(DSL.name("ROLE"), SQLDataType.VARCHAR(45).nullable(false).defaultValue(DSL.inline("ROLE_ADMIN", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>dmc_report.T_DR_MANAGER.AUTHORITY</code>. 콘텐츠관리자:3
     * 운영관리자:2 슈퍼관리자:1
     */
    public final TableField<JTDrManagerRecord, String> AUTHORITY = createField(DSL.name("AUTHORITY"), SQLDataType.VARCHAR(45).nullable(false), this, "콘텐츠관리자:3 운영관리자:2 슈퍼관리자:1");

    /**
     * The column <code>dmc_report.T_DR_MANAGER.DEPARTMENT</code>. 부서
     */
    public final TableField<JTDrManagerRecord, String> DEPARTMENT = createField(DSL.name("DEPARTMENT"), SQLDataType.VARCHAR(100), this, "부서");

    /**
     * The column <code>dmc_report.T_DR_MANAGER.EMAIL</code>.
     */
    public final TableField<JTDrManagerRecord, String> EMAIL = createField(DSL.name("EMAIL"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>dmc_report.T_DR_MANAGER.REG_DATE</code>.
     */
    public final TableField<JTDrManagerRecord, LocalDateTime> REG_DATE = createField(DSL.name("REG_DATE"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>dmc_report.T_DR_MANAGER.STATUS</code>. 허용:1 만료:2
     */
    public final TableField<JTDrManagerRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(45).nullable(false), this, "허용:1 만료:2");

    private JTDrManager(Name alias, Table<JTDrManagerRecord> aliased) {
        this(alias, aliased, null);
    }

    private JTDrManager(Name alias, Table<JTDrManagerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("관리자 테이블"), TableOptions.table());
    }

    /**
     * Create an aliased <code>dmc_report.T_DR_MANAGER</code> table reference
     */
    public JTDrManager(String alias) {
        this(DSL.name(alias), T_DR_MANAGER);
    }

    /**
     * Create an aliased <code>dmc_report.T_DR_MANAGER</code> table reference
     */
    public JTDrManager(Name alias) {
        this(alias, T_DR_MANAGER);
    }

    /**
     * Create a <code>dmc_report.T_DR_MANAGER</code> table reference
     */
    public JTDrManager() {
        this(DSL.name("T_DR_MANAGER"), null);
    }

    public <O extends Record> JTDrManager(Table<O> child, ForeignKey<O, JTDrManagerRecord> key) {
        super(child, key, T_DR_MANAGER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JDmcReport.DMC_REPORT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.T_DR_MANAGER_MANAGER_ID);
    }

    @Override
    public UniqueKey<JTDrManagerRecord> getPrimaryKey() {
        return Keys.KEY_T_DR_MANAGER_PRIMARY;
    }

    @Override
    public JTDrManager as(String alias) {
        return new JTDrManager(DSL.name(alias), this);
    }

    @Override
    public JTDrManager as(Name alias) {
        return new JTDrManager(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JTDrManager rename(String name) {
        return new JTDrManager(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JTDrManager rename(Name name) {
        return new JTDrManager(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, String, String, String, String, String, String, LocalDateTime, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
