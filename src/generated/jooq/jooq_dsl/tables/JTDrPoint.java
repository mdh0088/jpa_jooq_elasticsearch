/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables;


import java.time.LocalDateTime;

import jooq.jooq_dsl.JDmcReport;
import jooq.jooq_dsl.Keys;
import jooq.jooq_dsl.tables.records.JTDrPointRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 포인트  유닛 테이블
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JTDrPoint extends TableImpl<JTDrPointRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>dmc_report.T_DR_POINT</code>
     */
    public static final JTDrPoint T_DR_POINT = new JTDrPoint();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JTDrPointRecord> getRecordType() {
        return JTDrPointRecord.class;
    }

    /**
     * The column <code>dmc_report.T_DR_POINT.POINT_CODE</code>.
     */
    public final TableField<JTDrPointRecord, String> POINT_CODE = createField(DSL.name("POINT_CODE"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>dmc_report.T_DR_POINT.POINT_NAME</code>. 포인트 명
     */
    public final TableField<JTDrPointRecord, String> POINT_NAME = createField(DSL.name("POINT_NAME"), SQLDataType.VARCHAR(32).nullable(false), this, "포인트 명");

    /**
     * The column <code>dmc_report.T_DR_POINT.POINT_NUM</code>.
     */
    public final TableField<JTDrPointRecord, Integer> POINT_NUM = createField(DSL.name("POINT_NUM"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>dmc_report.T_DR_POINT.POINT_ACTIVE</code>. 사용여부
     */
    public final TableField<JTDrPointRecord, String> POINT_ACTIVE = createField(DSL.name("POINT_ACTIVE"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("Y", SQLDataType.VARCHAR)), this, "사용여부");

    /**
     * The column <code>dmc_report.T_DR_POINT.POINT_DESC</code>. 사용여부
     */
    public final TableField<JTDrPointRecord, String> POINT_DESC = createField(DSL.name("POINT_DESC"), SQLDataType.VARCHAR(3000), this, "사용여부");

    /**
     * The column <code>dmc_report.T_DR_POINT.REG_ID</code>. 등록자 ID
     */
    public final TableField<JTDrPointRecord, String> REG_ID = createField(DSL.name("REG_ID"), SQLDataType.VARCHAR(32), this, "등록자 ID");

    /**
     * The column <code>dmc_report.T_DR_POINT.REG_DATE</code>. 등록 일자
     */
    public final TableField<JTDrPointRecord, LocalDateTime> REG_DATE = createField(DSL.name("REG_DATE"), SQLDataType.LOCALDATETIME(0), this, "등록 일자");

    /**
     * The column <code>dmc_report.T_DR_POINT.EDIT_DATE</code>. 변경일자
     */
    public final TableField<JTDrPointRecord, LocalDateTime> EDIT_DATE = createField(DSL.name("EDIT_DATE"), SQLDataType.LOCALDATETIME(0), this, "변경일자");

    /**
     * The column <code>dmc_report.T_DR_POINT.EDIT_ID</code>. 변경자 ID
     */
    public final TableField<JTDrPointRecord, String> EDIT_ID = createField(DSL.name("EDIT_ID"), SQLDataType.VARCHAR(32), this, "변경자 ID");

    private JTDrPoint(Name alias, Table<JTDrPointRecord> aliased) {
        this(alias, aliased, null);
    }

    private JTDrPoint(Name alias, Table<JTDrPointRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("포인트  유닛 테이블"), TableOptions.table());
    }

    /**
     * Create an aliased <code>dmc_report.T_DR_POINT</code> table reference
     */
    public JTDrPoint(String alias) {
        this(DSL.name(alias), T_DR_POINT);
    }

    /**
     * Create an aliased <code>dmc_report.T_DR_POINT</code> table reference
     */
    public JTDrPoint(Name alias) {
        this(alias, T_DR_POINT);
    }

    /**
     * Create a <code>dmc_report.T_DR_POINT</code> table reference
     */
    public JTDrPoint() {
        this(DSL.name("T_DR_POINT"), null);
    }

    public <O extends Record> JTDrPoint(Table<O> child, ForeignKey<O, JTDrPointRecord> key) {
        super(child, key, T_DR_POINT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JDmcReport.DMC_REPORT;
    }

    @Override
    public UniqueKey<JTDrPointRecord> getPrimaryKey() {
        return Keys.KEY_T_DR_POINT_PRIMARY;
    }

    @Override
    public JTDrPoint as(String alias) {
        return new JTDrPoint(DSL.name(alias), this);
    }

    @Override
    public JTDrPoint as(Name alias) {
        return new JTDrPoint(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JTDrPoint rename(String name) {
        return new JTDrPoint(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JTDrPoint rename(Name name) {
        return new JTDrPoint(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, String, Integer, String, String, String, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
