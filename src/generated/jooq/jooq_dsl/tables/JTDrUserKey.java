/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables;


import jooq.jooq_dsl.JDmcReport;
import jooq.jooq_dsl.Keys;
import jooq.jooq_dsl.tables.records.JTDrUserKeyRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 회원 키 테이블
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JTDrUserKey extends TableImpl<JTDrUserKeyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>dmc_report.T_DR_USER_KEY</code>
     */
    public static final JTDrUserKey T_DR_USER_KEY = new JTDrUserKey();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JTDrUserKeyRecord> getRecordType() {
        return JTDrUserKeyRecord.class;
    }

    /**
     * The column <code>dmc_report.T_DR_USER_KEY.IDX</code>.
     */
    public final TableField<JTDrUserKeyRecord, Integer> IDX = createField(DSL.name("IDX"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>dmc_report.T_DR_USER_KEY.KEY_CODE</code>.
     */
    public final TableField<JTDrUserKeyRecord, String> KEY_CODE = createField(DSL.name("KEY_CODE"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>dmc_report.T_DR_USER_KEY.USER_ID</code>.
     */
    public final TableField<JTDrUserKeyRecord, String> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>dmc_report.T_DR_USER_KEY.NAME</code>.
     */
    public final TableField<JTDrUserKeyRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>dmc_report.T_DR_USER_KEY.AUTH_USER_NAME</code>.
     */
    public final TableField<JTDrUserKeyRecord, String> AUTH_USER_NAME = createField(DSL.name("AUTH_USER_NAME"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>dmc_report.T_DR_USER_KEY.DEPARTMENT_NAME</code>.
     */
    public final TableField<JTDrUserKeyRecord, String> DEPARTMENT_NAME = createField(DSL.name("DEPARTMENT_NAME"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>dmc_report.T_DR_USER_KEY.DEPARTMENT_LEVEL</code>.
     */
    public final TableField<JTDrUserKeyRecord, String> DEPARTMENT_LEVEL = createField(DSL.name("DEPARTMENT_LEVEL"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>dmc_report.T_DR_USER_KEY.DEPARTMENT_IP</code>.
     */
    public final TableField<JTDrUserKeyRecord, String> DEPARTMENT_IP = createField(DSL.name("DEPARTMENT_IP"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>dmc_report.T_DR_USER_KEY.MOBILE_NUMBER</code>.
     */
    public final TableField<JTDrUserKeyRecord, String> MOBILE_NUMBER = createField(DSL.name("MOBILE_NUMBER"), SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>dmc_report.T_DR_USER_KEY.MAC</code>.
     */
    public final TableField<JTDrUserKeyRecord, String> MAC = createField(DSL.name("MAC"), SQLDataType.VARCHAR(100), this, "");

    private JTDrUserKey(Name alias, Table<JTDrUserKeyRecord> aliased) {
        this(alias, aliased, null);
    }

    private JTDrUserKey(Name alias, Table<JTDrUserKeyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("회원 키 테이블"), TableOptions.table());
    }

    /**
     * Create an aliased <code>dmc_report.T_DR_USER_KEY</code> table reference
     */
    public JTDrUserKey(String alias) {
        this(DSL.name(alias), T_DR_USER_KEY);
    }

    /**
     * Create an aliased <code>dmc_report.T_DR_USER_KEY</code> table reference
     */
    public JTDrUserKey(Name alias) {
        this(alias, T_DR_USER_KEY);
    }

    /**
     * Create a <code>dmc_report.T_DR_USER_KEY</code> table reference
     */
    public JTDrUserKey() {
        this(DSL.name("T_DR_USER_KEY"), null);
    }

    public <O extends Record> JTDrUserKey(Table<O> child, ForeignKey<O, JTDrUserKeyRecord> key) {
        super(child, key, T_DR_USER_KEY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JDmcReport.DMC_REPORT;
    }

    @Override
    public Identity<JTDrUserKeyRecord, Integer> getIdentity() {
        return (Identity<JTDrUserKeyRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<JTDrUserKeyRecord> getPrimaryKey() {
        return Keys.KEY_T_DR_USER_KEY_PRIMARY;
    }

    @Override
    public JTDrUserKey as(String alias) {
        return new JTDrUserKey(DSL.name(alias), this);
    }

    @Override
    public JTDrUserKey as(Name alias) {
        return new JTDrUserKey(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JTDrUserKey rename(String name) {
        return new JTDrUserKey(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JTDrUserKey rename(Name name) {
        return new JTDrUserKey(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
