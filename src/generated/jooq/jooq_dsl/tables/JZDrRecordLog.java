/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables;


import java.time.LocalDateTime;

import jooq.jooq_dsl.JDmcReport;
import jooq.jooq_dsl.Keys;
import jooq.jooq_dsl.tables.records.JZDrRecordLogRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JZDrRecordLog extends TableImpl<JZDrRecordLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>dmc_report.Z_DR_RECORD_LOG</code>
     */
    public static final JZDrRecordLog Z_DR_RECORD_LOG = new JZDrRecordLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JZDrRecordLogRecord> getRecordType() {
        return JZDrRecordLogRecord.class;
    }

    /**
     * The column <code>dmc_report.Z_DR_RECORD_LOG.IDX</code>. 번호
     */
    public final TableField<JZDrRecordLogRecord, Integer> IDX = createField(DSL.name("IDX"), SQLDataType.INTEGER.nullable(false).identity(true), this, "번호");

    /**
     * The column <code>dmc_report.Z_DR_RECORD_LOG.USER_ID</code>. 사용자ID
     */
    public final TableField<JZDrRecordLogRecord, String> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.VARCHAR(64), this, "사용자ID");

    /**
     * The column <code>dmc_report.Z_DR_RECORD_LOG.RECORD_PATH</code>. 기록내용
     */
    public final TableField<JZDrRecordLogRecord, String> RECORD_PATH = createField(DSL.name("RECORD_PATH"), SQLDataType.VARCHAR(200), this, "기록내용");

    /**
     * The column <code>dmc_report.Z_DR_RECORD_LOG.RECORD_CODE</code>. 기록타입코드
     */
    public final TableField<JZDrRecordLogRecord, String> RECORD_CODE = createField(DSL.name("RECORD_CODE"), SQLDataType.VARCHAR(6), this, "기록타입코드");

    /**
     * The column
     * <code>dmc_report.Z_DR_RECORD_LOG.RECORD_OCCURRENCE_VALUES</code>. 기록 발생된
     * 코드값
     */
    public final TableField<JZDrRecordLogRecord, String> RECORD_OCCURRENCE_VALUES = createField(DSL.name("RECORD_OCCURRENCE_VALUES"), SQLDataType.CLOB, this, "기록 발생된 코드값");

    /**
     * The column <code>dmc_report.Z_DR_RECORD_LOG.CONNECTION_IP</code>. 접속IP
     */
    public final TableField<JZDrRecordLogRecord, String> CONNECTION_IP = createField(DSL.name("CONNECTION_IP"), SQLDataType.VARCHAR(32), this, "접속IP");

    /**
     * The column <code>dmc_report.Z_DR_RECORD_LOG.USE_BROWSER</code>. 접속 브라우저
     */
    public final TableField<JZDrRecordLogRecord, String> USE_BROWSER = createField(DSL.name("USE_BROWSER"), SQLDataType.VARCHAR(32), this, "접속 브라우저");

    /**
     * The column <code>dmc_report.Z_DR_RECORD_LOG.EXECUTABLE_QUERY</code>.
     * 사용된쿼리
     */
    public final TableField<JZDrRecordLogRecord, String> EXECUTABLE_QUERY = createField(DSL.name("EXECUTABLE_QUERY"), SQLDataType.CLOB, this, "사용된쿼리");

    /**
     * The column <code>dmc_report.Z_DR_RECORD_LOG.REGIST_DATETIME</code>. 등록일
     */
    public final TableField<JZDrRecordLogRecord, LocalDateTime> REGIST_DATETIME = createField(DSL.name("REGIST_DATETIME"), SQLDataType.LOCALDATETIME(0), this, "등록일");

    private JZDrRecordLog(Name alias, Table<JZDrRecordLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private JZDrRecordLog(Name alias, Table<JZDrRecordLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>dmc_report.Z_DR_RECORD_LOG</code> table reference
     */
    public JZDrRecordLog(String alias) {
        this(DSL.name(alias), Z_DR_RECORD_LOG);
    }

    /**
     * Create an aliased <code>dmc_report.Z_DR_RECORD_LOG</code> table reference
     */
    public JZDrRecordLog(Name alias) {
        this(alias, Z_DR_RECORD_LOG);
    }

    /**
     * Create a <code>dmc_report.Z_DR_RECORD_LOG</code> table reference
     */
    public JZDrRecordLog() {
        this(DSL.name("Z_DR_RECORD_LOG"), null);
    }

    public <O extends Record> JZDrRecordLog(Table<O> child, ForeignKey<O, JZDrRecordLogRecord> key) {
        super(child, key, Z_DR_RECORD_LOG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JDmcReport.DMC_REPORT;
    }

    @Override
    public Identity<JZDrRecordLogRecord, Integer> getIdentity() {
        return (Identity<JZDrRecordLogRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<JZDrRecordLogRecord> getPrimaryKey() {
        return Keys.KEY_Z_DR_RECORD_LOG_PRIMARY;
    }

    @Override
    public JZDrRecordLog as(String alias) {
        return new JZDrRecordLog(DSL.name(alias), this);
    }

    @Override
    public JZDrRecordLog as(Name alias) {
        return new JZDrRecordLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JZDrRecordLog rename(String name) {
        return new JZDrRecordLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JZDrRecordLog rename(Name name) {
        return new JZDrRecordLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, String, String, String, String, String, String, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
